# -*- coding: utf-8 -*-
"""recommendation_engines.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qz7yKoM3fLP_214Smcb5ZvLZy0GESulj
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

"""This e-commerce dataset includes user interactions with products, featuring columns for UserID, ProductID, Rating, and Timestamp, capturing user preferences and activity over time. Additionally, it contains Product Description, providing textual details about each product for content-based analysis."""

df = pd.read_excel('Ecommerce.xlsx')
df.head()

df['Timestamp'] = pd.to_datetime(df['Timestamp'] ,unit='ms')
df.head()

df.shape

df.info()

df.isnull().sum()

df.duplicated().sum()

"""**Content-Based Filtering:**

A content-based recommendation engine looks at product descriptions to find items with similar features. It recommends products that match what the user likes based on their past choices.








"""

vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(df['product_description'])

Similarity =  cosine_similarity(tfidf_matrix, tfidf_matrix)

def recommend_products(ProductId, Similarity, df,top_n):
    idx = df[df['ProductId'] == ProductId].index[0]
    sim_scores = list(enumerate(Similarity[idx]))
    sim_scores = sorted(sim_scores,key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]
    recommended = [df.iloc[i[0]]['ProductId'] for i in sim_scores]
    return recommended

random_productID = df['ProductId'].sample(n=1).iloc[0]
print('Product ID',random_productID)
recommended = recommend_products(random_productID,Similarity, df,3)
print('recommended products :', recommended)

"""**Collaborative Filtering:**

A collaborative filtering recommendation engine suggests products based on customer ratings. It identifies patterns in user preferences and recommends items liked by similar users.
"""

ratings = df.groupby('ProductId')['Rating'].agg(['mean','count']).sort_values(by='count',ascending=False)
ratings.head(10)

ratings['mean'].hist(bins = 20)
plt.show()

df.nunique()

matrix = df.pivot_table(index = 'UserId', columns = 'ProductId', values = 'Rating',fill_value=0)
matrix.head()

def recommend(ProductID,topn):
  product_ratings = matrix[ProductID]
  similar_products = matrix.corrwith(product_ratings)
  recommended_products = pd.DataFrame(similar_products,columns = ['Correlation'])
  recommended_products.dropna(inplace = True)
  recommended_productsID = recommended_products.sort_values('Correlation',ascending = False)
  return recommended_productsID.iloc[1:topn+1].index.tolist()

random_productID = df['ProductId'].sample(n=1).iloc[0]
print('Product ID',random_productID)
recommended_cf = recommend(random_productID,3)
print('Recommented Products :',recommended_cf)

